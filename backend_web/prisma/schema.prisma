generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["deno"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DB_URL")
}

model User {
  id                                      String              @id
  serializedId                            String?             @unique
  username                                String?             @unique
  oauthUrl                                String?
  oauthUsername                           String?
  oauthName                               String?
  oauthAvatarUrl                          String?
  dateCreated                             DateTime            @default(now())
  numberOfGames                           Int                 @default(0)
  ChallengeModifier                       ChallengeModifier[]
  Downvote                                Downvote[]
  Game                                    Game[]
  ModifierOption                          ModifierOption[]
  ModifierPack                            ModifierPack[]
  PublicProfile                           PublicProfile[]
  Upvote                                  Upvote[]
  DefaultExcludedChallengeModifiers       ChallengeModifier[] @relation("DefaultExcludedChallengeModifiers")
  DefaultExcludedModifierOptions          ModifierOption[]    @relation("DefaultExcludedModifierOptions")
  DefaultIncludedCustomChallengeModifiers ChallengeModifier[] @relation("DefaultIncludedCustomChallengeModifiers")
  DefaultIncludedCustomModifierOptions    ModifierOption[]    @relation("DefaultIncludedCustomModifierOptions")

  @@index([id, serializedId, username], name: "username_lookup")
  @@index([id, username, oauthUsername, oauthName], name: "user_data_simple")
  @@index([id, numberOfGames], name: "user_number_of_games")
  @@index([id, username, oauthAvatarUrl, Game], name: "user_game_data")
}

model PublicProfile {
  id          Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  name        String
  userId      String
  Game        Game[]
  User        User     @relation(fields: [userId], references: [id])
}

model Game {
  id                              Int            @id @default(autoincrement())
  dateCreated                     DateTime       @default(now())
  userId                          String
  number                          Int
  year                            Int
  name                            String
  playerName                      String?
  currentDay                      Int            @default(0)
  currentDayCompleted             Boolean        @default(false)
  currentRerollTokens             Int            @default(24)
  rerollTokensSpent               Int            @default(0)
  rerollTokensSpentDuringPart2Raw Int            @default(0)
  part2RerollBonus                Int            @default(0)
  repositoryLink                  String?
  progressSheetLink               String         @default("/game/public/${id}")
  isPublic                        Boolean        @default(false)
  publicProfileId                 Int?
  score                           Int            @default(0)
  titleId                         Int?
  dateCompleted                   DateTime?
  Day                             Day[]
  Downvote                        Downvote[]
  PublicProfile                   PublicProfile? @relation(fields: [publicProfileId], references: [id])
  Title                           Title?         @relation(fields: [titleId], references: [id])
  User                            User           @relation(fields: [userId], references: [id])
  Upvote                          Upvote[]

  @@index([score(sort: Desc), year(sort: Desc), id, playerName, name, number, titleId, repositoryLink, userId], name: "leaderboard_games")
  @@index([userId(sort: Asc), number(sort: Asc), id, name, year], name: "user_games_list")
  @@index([userId(sort: Asc), number(sort: Asc), id], name: "user_number_of_games")
  @@index([userId(sort: Asc), number(sort:Asc), id, year, name, isPublic, repositoryLink, currentRerollTokens, currentDay, currentDayCompleted, Day], name: "user_game_data")
}

model Title {
  id           Int    @id @default(autoincrement())
  name         String @unique
  minimumScore Int
  Game         Game[]

  @@index([id, name, minimumScore], name: "titles_basic_info")
}

model Day {
  id                               Int                 @id @default(autoincrement())
  dateCreated                      DateTime            @default(now())
  gameId                           Int
  userId                           String
  gameNumber                       Int
  number                           Int
  challengeModifierId              Int?
  modifierOptionId                 Int?
  dateFirstRolled                  DateTime?
  part1Completed                   DateTime?
  modifierWhenPart1CompletedId     Int?
  optionWhenPart1CompletedId       Int?
  part2Completed                   DateTime?
  challengeModifierRerollsUsed     Int                 @default(0)
  modifierOptionRerollsUsed        Int                 @default(0)
  rerollTokensSpentDuringPart2     Int                 @default(0)
  score                            Int                 @default(0)
  ChallengeModifier                ChallengeModifier?  @relation(fields: [challengeModifierId], references: [id])
  Game                             Game                @relation(fields: [gameId], references: [id])
  ModifierOption                   ModifierOption?     @relation(fields: [modifierOptionId], references: [id])
  ModifierWhenPart1Completed       ChallengeModifier?  @relation("ModifierWhenPart1Completed", fields: [modifierWhenPart1CompletedId], references: [id])
  OptionWhenPart1Completed         ModifierOption?     @relation("OptionWhenPart1Completed", fields: [optionWhenPart1CompletedId], references: [id])
  ExcludedChallengeModifiers       ChallengeModifier[] @relation("ExcludedChallengeModifiers")
  EncludedCustomChallengeModifiers ChallengeModifier[] @relation("IncludedCustomChallengeModifiers")

  @@index([gameId(sort: Asc), number(sort:Asc), id, modifierOptionId, challengeModifierId,modifierWhenPart1CompletedId, optionWhenPart1CompletedId,  part1Completed, part2Completed, dateFirstRolled, challengeModifierRerollsUsed, modifierOptionRerollsUsed, rerollTokensSpentDuringPart2, score], name: "user_game_data")
}

model ChallengeModifier {
  id                   Int              @id @default(autoincrement())
  dateCreated          DateTime         @default(now())
  name                 String           @unique
  text                 String
  hasOptions           Boolean          @default(false)
  explanatoryUrl       String?
  standard             Boolean          @default(false)
  createdById          String?
  isPublic             Boolean          @default(false)
  CreatedBy            User?            @relation(fields: [createdById], references: [id])
  Day                  Day[]
  DayCompletedInPart1  Day[]            @relation("ModifierWhenPart1Completed")
  ModifierOption       ModifierOption[]
  UserExcluded         User[]           @relation("DefaultExcludedChallengeModifiers")
  UserIncluded         User[]           @relation("DefaultIncludedCustomChallengeModifiers")
  ModifierPackExcluded Day[]            @relation("ExcludedChallengeModifiers")
  ModifierPackIncluded Day[]            @relation("IncludedCustomChallengeModifiers")

  @@index([id(sort: Asc), text, explanatoryUrl], name: "user_game_data")
}

model ModifierOption {
  id                            Int               @id @default(autoincrement())
  dateCreated                   DateTime          @default(now())
  challengeModifierId           Int
  name                          String            @unique
  text                          String
  shortText                     String?
  explanatoryUrl                String?
  standard                      Boolean           @default(false)
  createdById                   String?
  isPublic                      Boolean           @default(false)
  Day                           Day[]
  DayCompletedInPart1           Day[]             @relation("OptionWhenPart1Completed")
  ChallengeModifier             ChallengeModifier @relation(fields: [challengeModifierId], references: [id])
  CreatedBy                     User?             @relation(fields: [createdById], references: [id])
  UserExcluded                  User[]            @relation("DefaultExcludedModifierOptions")
  UserIncluded                  User[]            @relation("DefaultIncludedCustomModifierOptions")
  ExcludedModifierOptions       ModifierPack[]    @relation("ExcludedModifierOptions")
  IncludedCustomModifierOptions ModifierPack[]    @relation("IncludedCustomModifierOptions")
  
  @@index([id(sort: Asc), text, explanatoryUrl], name: "user_game_data")
}

model ModifierPack {
  id              Int              @id @default(autoincrement())
  dateCreated     DateTime         @default(now())
  createdById     String?
  isPublic        Boolean          @default(false)
  CreatedBy       User?            @relation(fields: [createdById], references: [id])
  ExcludedFromDay ModifierOption[] @relation("ExcludedModifierOptions")
  IncludedInDay   ModifierOption[] @relation("IncludedCustomModifierOptions")
}

model Upvote {
  id          Int      @id @default(autoincrement())
  note        String?
  dateCreated DateTime @default(now())
  gameId      Int
  createdById String
  CreatedBy   User     @relation(fields: [createdById], references: [id])
  Game        Game     @relation(fields: [gameId], references: [id])
}

model Downvote {
  id          Int      @id @default(autoincrement())
  note        String
  dateCreated DateTime @default(now())
  gameId      Int
  createdById String
  CreatedBy   User     @relation(fields: [createdById], references: [id])
  Game        Game     @relation(fields: [gameId], references: [id])
}
