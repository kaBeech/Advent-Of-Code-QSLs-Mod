// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  Game              Game[]
  PublicProfile     PublicProfile[]
  ChallengeModifier ChallengeModifier[]
  ModifierOption    ModifierOption[]
}

model PublicProfile {
  id          Int      @id @default(autoincrement())
  name        String
  Game        Game[]
  userId      Int
  User        User     @relation(fields: [userId], references: [id])
  dateCreated DateTime @default(now())
}

model Game {
  id                  Int            @id @default(autoincrement())
  userId              Int
  number              Int
  year                Int
  name                String
  playerName          String?
  currentDay          Int            @default(0)
  currentDayCompleted Boolean        @default(false)
  currentRerollTokens Int            @default(7)
  rerollTokensSpent   Int            @default(0)
  repositoryLink      String?
  progressSheetLink   String?
  public              Boolean        @default(false)
  publicProfileId     Int?
  score               Int            @default(0)
  rankId              Int
  dateCreated         DateTime       @default(now())
  dateCompleted       DateTime?
  User                User           @relation(fields: [userId], references: [id])
  Rank                Rank           @relation(fields: [rankId], references: [id])
  Day                 Day[]
  publicProfile       PublicProfile? @relation(fields: [publicProfileId], references: [id])
}

model Rank {
  id           Int    @id @default(autoincrement())
  name         String @unique
  minimumScore Int
  Game         Game[]
}

model Day {
  id                           Int                @id @default(autoincrement())
  game                         Game               @relation(fields: [gameId], references: [id])
  number                       Int
  part1Completed               DateTime?
  modifierWhenPart1CompletedId Int?
  ModifierWhenPart1Completed   ChallengeModifier? @relation(name: "ModifierWhenPart1Completed", fields: [modifierWhenPart1CompletedId], references: [id])
  optionWhenPart1CompletedId   Int?
  OptionWhenPart1Completed     ModifierOption?    @relation(name: "OptionWhenPart1Completed", fields: [optionWhenPart1CompletedId], references: [id])
  part2Completed               DateTime?
  ChallengeModifier            ChallengeModifier? @relation(fields: [challengeModifierId], references: [id])
  ModifierOption               ModifierOption?    @relation(fields: [modifierOptionId], references: [id])
  challengeModifierRerollsUsed Int                @default(0)
  modifierOptionRerollsUsed    Int                @default(0)
  challengeModifierId          Int?
  modifierOptionId             Int?
  gameId                       Int
}

model ChallengeModifier {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  text           String
  hasOptions     Boolean          @default(false)
  explanatoryURL String?
  standard       Boolean          @default(false)
  createdById    Int?
  public         Boolean          @default(false)
  User           User?            @relation(fields: [createdById], references: [id])
  ModifierOption ModifierOption[]
  Day            Day[]
  Day            Day[]
}

model ModifierOption {
  id                  Int               @id @default(autoincrement())
  name                String            @unique
  challengeModifierId Int
  text                String
  explanatoryURL      String?
  standard            Boolean           @default(false)
  createdById         Int?
  public              Boolean           @default(false)
  User                User?             @relation(fields: [createdById], references: [id])
  Day                 Day[]
  ChallengeModifier   ChallengeModifier @relation(fields: [challengeModifierId], references: [id])
  Day                 Day[]
}
